import type { Metadata } from 'next';
import { Lexend } from 'next/font/google';
import '../../globals.css';
import {
  NavigationBar,
  Project,
  SocialIconType,
} from '@/components/molecules/NavigationBar/NavigationBar';
import { NextIntlClientProvider, hasLocale } from 'next-intl';
import { routing } from '@/i18n/routing';
import { notFound } from 'next/navigation';
import { setRequestLocale } from 'next-intl/server';
import configPromise from '@payload-config';
import { getPayload } from 'payload';
import { cache } from 'react';
import { ImagesProvider } from '@/components/providers/ImageProvider';
import { Social } from '@/payload-types';
import { getCachedGlobal } from '@/utilities/getGlobals';
import DynamicFavIcon from '@/components/DynamicFavIcon/DynamicFavIcon';
import { DisplayProvider } from '@/components/providers/DisplayProvider';

const LexendSans = Lexend({
  subsets: ['latin'],
  variable: '--font-lexend',
  display: 'swap',
  weight: ['100', '200', '300', '400', '500', '600', '700', '800', '900'],
});

export const metadata: Metadata = {
  title: 'Create Next App',
  description: 'Generated by create next app',
};

export async function generateStaticParams() {
  return routing.locales.map((locale) => ({ locale }));
}

export default async function RootLayout({
  children,
  params,
}: Readonly<{
  children: React.ReactNode;
  params: Promise<{ locale: string }>;
}>) {
  const { locale } = await params;
  if (!hasLocale(routing.locales, locale)) {
    notFound();
  }

  const portfolioData = (await getCachedGlobal('social', 1)()) as Social;
  const socialMedia =
    portfolioData?.socials.map((item) => {
      return {
        url: item.link,
        icon: item.socialList as SocialIconType,
      };
    }) || [];

  const projects = await queryProject();

  setRequestLocale(locale);

  return (
    <html lang={locale}>
      <DisplayProvider>
        <NextIntlClientProvider>
          <body className={LexendSans.className}>
            <DynamicFavIcon />
            <div id='myportal' />
            <div className='flex p-4 md:p-14 lg:p-20 justify-center h-auto md:h-[100vh]'>
              <div className='flex flex-col h-full md:flex-row gap-4 w-full max-w-[1200px]'>
                <ImagesProvider>
                  <NavigationBar
                    projects={projects}
                    socialMedia={socialMedia}
                  />
                  <div className='w-full overflow-y-scroll'>{children}</div>
                </ImagesProvider>
              </div>
            </div>
          </body>
        </NextIntlClientProvider>
      </DisplayProvider>
    </html>
  );
}

const queryProject = cache(async () => {
  const payload = await getPayload({ config: configPromise });
  const projectsData = await payload.find({
    collection: 'project',
    draft: false,
    limit: 1000,
    locale: 'all',
    overrideAccess: false,
    pagination: false,
  });

  const projects = projectsData.docs.map((project) => {
    return {
      id: project.id,
      url: project.slug ?? {},
      name:
        typeof project.title === 'object' && project.title !== null
          ? project.title
          : { en: '', se: '', hu: '' },
    } as Project;
  });

  return projects;
});
